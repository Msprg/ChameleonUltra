name: Build Firmware

# Controls when the workflow will run
on:
  push:
    branches: [ main ] # Runs on pushes to the main branch
  pull_request:
    branches: [ main ] # Runs on pull requests targeting the main branch
  # workflow_dispatch: # Allows manual triggering from the Actions tab

jobs:
  build_firmware:
    name: Build Firmware (${{ matrix.device_type }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false # Keep running other matrix jobs even if one fails
      matrix:
        # Define the device types your project builds for. 
        # Adjust or remove if your fork simplifies this.
        device_type: [ultra, lite] 

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history if build script needs it (e.g., for versioning)

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build fw-builder Docker image
        uses: docker/build-push-action@v5
        with:
          context: firmware # <--- VERIFY: Path to the directory containing the Dockerfile
          push: false # Don't push to registry, just build locally
          load: true  # Load the image into the local Docker daemon
          tags: local-fw-builder:latest # Tag for local use
          cache-from: type=gha # Enable build cache from GitHub Actions cache
          cache-to: type=gha,mode=max # Enable build cache saving to GitHub Actions cache

      - name: Build firmware using Docker container
        env:
           # Pass the device type from the matrix as an environment variable to the build script
          CURRENT_DEVICE_TYPE: ${{ matrix.device_type }}
        run: |
          echo "--- Building firmware for ${{ matrix.device_type }} ---"
          # Mount current directory to /workdir in container and run the build script
          # VERIFY: The mount point /workdir and the path to build.sh inside the container
          docker run --rm \
            -v "${PWD}":/workdir \
            -e CURRENT_DEVICE_TYPE \
            local-fw-builder:latest \
            firmware/build.sh # <--- VERIFY: Path to the build script inside the repository/container

      - name: Upload Firmware Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.device_type }}-firmware-artifacts # Artifact name includes device type
          # VERIFY: The output path where build.sh places the artifacts
          path: |
            firmware/objects/*.hex 
            firmware/objects/*.zip
          retention-days: 7 # Optional: Keep artifacts for 7 days (default is 90)